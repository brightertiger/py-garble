# pygarble: Complete Setup and Publishing Guide
================================================================================

This comprehensive guide covers everything you need to know about setting up,
testing, and publishing the pygarble package.

TABLE OF CONTENTS
=================
1. Branch Protection Setup
2. GitHub Actions Workflows
3. Publishing to PyPI
4. Documentation Deployment
5. Local Development
6. Troubleshooting
7. Security Best Practices

================================================================================
1. BRANCH PROTECTION SETUP
================================================================================

This guide explains how to set up branch protection rules to ensure all tests 
pass before allowing merges to the main branch.

OVERVIEW
--------
The `ci.yml` workflow runs comprehensive tests on every push and pull request, 
including:
- Test Suite: All 44 tests across 5 test files
- Linting: Code style and quality checks
- Type Checking: Static type analysis
- Package Building: Ensures the package can be built successfully

SETTING UP BRANCH PROTECTION
----------------------------

Step 1: Navigate to Repository Settings
1. Go to your GitHub repository
2. Click on Settings tab
3. Click on Branches in the left sidebar

Step 2: Add Branch Protection Rule
1. Click Add rule or Add branch protection rule
2. In the Branch name pattern field, enter: main (or master if that's your default branch)

Step 3: Configure Protection Settings
Enable the following options:

‚úÖ Require a pull request before merging
- Check this box
- Optionally check "Require approvals" and set to 1 or more reviewers

‚úÖ Require status checks to pass before merging
- Check this box
- Check "Require branches to be up to date before merging"
- In the search box, add these required status checks:
  - test (3.8)
  - test (3.9)
  - test (3.10)
  - test (3.11)
  - test (3.12)
  - lint
  - build

‚úÖ Require conversation resolution before merging
- Check this box to ensure all comments are resolved

‚úÖ Restrict pushes that create files
- Check this box to prevent direct pushes

Step 4: Additional Options (Recommended)
‚úÖ Include administrators
- Check this box to apply rules to repository admins too

‚úÖ Allow force pushes
- Leave unchecked to prevent force pushes

‚úÖ Allow deletions
- Leave unchecked to prevent branch deletion

Step 5: Save the Rule
Click Create or Save changes to apply the branch protection rule.

WHAT THIS ACHIEVES
------------------
üõ°Ô∏è Quality Assurance
- No code can be merged without passing all tests
- Code style and quality standards are enforced
- Package builds successfully before merging

üîÑ Automated Workflow
- Tests run automatically on every push and PR
- Multiple Python versions are tested (3.8-3.12)
- Comprehensive coverage across all functionality

üë• Team Collaboration
- All team members must follow the same quality standards
- Pull requests are required for all changes
- Status checks provide clear feedback on code quality

WORKFLOW DETAILS
----------------
Test Matrix: The workflow tests against multiple Python versions:
- Python 3.8, 3.9, 3.10, 3.11, 3.12

Test Categories:
- Core Functionality: Basic imports and module structure
- Detector Tests: GarbleDetector initialization and methods
- Strategy Tests: Individual strategy implementations
- Edge Cases: Empty strings, whitespace, long strings
- Language Detection: FastText integration and offline support

Quality Checks:
- Linting: flake8, black, isort
- Type Checking: mypy
- Package Building: build and twine check

================================================================================
2. GITHUB ACTIONS WORKFLOWS
================================================================================

This repository includes comprehensive GitHub Actions workflows for CI/CD, 
testing, and publishing to PyPI.

WORKFLOWS
---------

1. CI Workflow (.github/workflows/ci.yml)
Triggers:
- Push to main or develop branches
- Pull requests to main branch

Features:
- Tests on Python 3.8, 3.9, 3.10, 3.11, 3.12
- Linting with flake8
- Code formatting check with black
- Type checking with mypy
- Test coverage with pytest
- Codecov integration
- Package building and validation

2. Publish Workflow (.github/workflows/publish.yml)
Triggers:
- Release publication
- Manual workflow dispatch

Features:
- Publishes to PyPI or Test PyPI
- Package validation before upload
- Secure token-based authentication

3. Version Bump Workflow (.github/workflows/version-bump.yml)
Triggers:
- Manual workflow dispatch

Features:
- Automated version bumping (patch/minor/major)
- Updates version in all relevant files
- Creates and pushes tags

SETUP INSTRUCTIONS
------------------

1. PyPI API Tokens
Create API tokens on PyPI:
1. Go to PyPI Account Settings (https://pypi.org/manage/account/)
2. Create API tokens for both PyPI and Test PyPI
3. Add tokens to GitHub repository secrets:
   - PYPI_API_TOKEN: Your PyPI API token
   - TEST_PYPI_API_TOKEN: Your Test PyPI API token

2. Repository Secrets
Add the following secrets to your GitHub repository:
PYPI_API_TOKEN=your_pypi_token_here
TEST_PYPI_API_TOKEN=your_test_pypi_token_here

3. Codecov Integration (Optional)
1. Sign up at Codecov (https://codecov.io/)
2. Add your repository
3. The CI workflow will automatically upload coverage reports

================================================================================
3. PUBLISHING TO PYPI
================================================================================

This guide explains how to publish the py-garble package to PyPI using GitHub Actions.

PREREQUISITES
-------------
1. PyPI Account: Create accounts on both PyPI (https://pypi.org) and Test PyPI (https://test.pypi.org)
2. API Tokens: Generate API tokens for both platforms
3. GitHub Repository: Push your code to GitHub

SETUP STEPS
-----------

1. Create PyPI API Tokens
1. Go to PyPI Account Settings (https://pypi.org/manage/account/)
2. Scroll to "API tokens" section
3. Click "Add API token"
4. Give it a name (e.g., "py-garble-publish")
5. Set scope to "Entire account" (for new packages)
6. Copy the token (starts with pypi-)

Repeat the same process for Test PyPI at test.pypi.org

2. Add GitHub Secrets
1. Go to your GitHub repository
2. Click "Settings" tab
3. Click "Secrets and variables" ‚Üí "Actions"
4. Click "New repository secret"
5. Add these secrets:

Name: PYPI_API_TOKEN
Value: pypi-your_token_here

Name: TEST_PYPI_API_TOKEN  
Value: pypi-your_test_token_here

3. Update Package Metadata
Before publishing, update these files with your information:
- pyproject.toml: Update author name, email, and URLs
- setup.py: Update author name, email, and URL
- README.md: Update repository URLs

PUBLISHING METHODS
------------------

Method 1: Release-based Publishing (Recommended)
1. Create a Release:
   - Go to GitHub repository
   - Click "Releases" ‚Üí "Create a new release"
   - Choose a tag (e.g., v0.1.0)
   - Add release title and description
   - Click "Publish release"

2. Automatic Publishing:
   - The publish workflow will automatically trigger
   - Package will be built and uploaded to PyPI
   - Check Actions tab for progress

Method 2: Manual Publishing
1. Go to Actions:
   - Click "Actions" tab in your repository
   - Select "Publish to PyPI" workflow
   - Click "Run workflow"

2. Choose Options:
   - Select branch (usually main)
   - Choose whether to publish to Test PyPI or PyPI
   - Click "Run workflow"

Method 3: Version Bump + Release
1. Bump Version:
   - Go to Actions tab
   - Select "Version Bump" workflow
   - Choose version type (patch/minor/major)
   - Click "Run workflow"

2. Create Release:
   - The workflow will create a new tag
   - Create a release for the new tag
   - Publish workflow will automatically trigger

TESTING BEFORE PUBLISHING
-------------------------

Test PyPI Publishing
1. Use manual publishing method
2. Select "Publish to Test PyPI" option
3. Test installation:
   pip install --index-url https://test.pypi.org/simple/ py-garble

Local Testing
# Build package locally
python -m build

# Check package
twine check dist/*

# Test installation
pip install dist/py_garble-0.1.0-py3-none-any.whl

POST-PUBLISHING
---------------

1. Verify Installation
pip install py-garble
python -c "from pygarble import GarbleDetector, Strategy; print('Success!')"

2. Update Documentation
- Update README with PyPI installation instructions
- Add PyPI badge to README
- Update any documentation links

3. Monitor
- Check PyPI package page: https://pypi.org/project/py-garble/
- Monitor download statistics
- Watch for issues or feedback

================================================================================
4. DOCUMENTATION DEPLOYMENT
================================================================================

This guide explains how to automatically deploy Sphinx documentation to GitHub Pages
when versions are released.

OVERVIEW
--------
The documentation deployment system automatically builds and publishes Sphinx docs
to GitHub Pages whenever:
- Code is pushed to the main branch
- A new release is published
- Manual deployment is triggered

This ensures documentation is always up-to-date and versioned appropriately.

WORKFLOWS
---------

1. Documentation Build (.github/workflows/docs.yml)
Triggers:
- Push to main branch
- Pull requests to main branch
- Release publication

Features:
- Builds Sphinx documentation
- Validates documentation structure
- Deploys to GitHub Pages (main branch only)
- Uses Read the Docs theme

2. Release Documentation (.github/workflows/release-docs.yml)
Triggers:
- Release publication

Features:
- Updates documentation version automatically
- Creates versioned documentation
- Deploys version-specific docs
- Maintains documentation history

SETUP INSTRUCTIONS
------------------

1. Enable GitHub Pages
1. Go to your GitHub repository
2. Click "Settings" tab
3. Scroll to "Pages" section
4. Under "Source", select "GitHub Actions"
5. Save the settings

2. Repository Permissions
1. Go to Settings ‚Üí Actions ‚Üí General
2. Under "Workflow permissions", select:
   - "Read and write permissions"
   - Check "Allow GitHub Actions to create and approve pull requests"
3. Save changes

3. Verify Workflow Files
Ensure these files exist in your repository:
- .github/workflows/docs.yml
- .github/workflows/release-docs.yml

DEPLOYMENT METHODS
------------------

Method 1: Automatic Deployment (Recommended)
1. Push to Main Branch:
   - Make changes to documentation
   - Push to main branch
   - Documentation automatically builds and deploys
   - Available at: https://yourusername.github.io/py-garble/

2. Release-based Deployment:
   - Create a new release on GitHub
   - Documentation automatically updates with new version
   - Versioned docs available at: https://yourusername.github.io/py-garble/versions/0.1.1/

Method 2: Manual Deployment
1. Go to Actions tab
2. Select "Build and Deploy Documentation" workflow
3. Click "Run workflow"
4. Select branch and click "Run workflow"

Method 3: Local Build and Deploy
# Build documentation locally
make docs

# Deploy (requires GitHub Actions setup)
make docs-deploy

DOCUMENTATION STRUCTURE
-----------------------

The documentation includes:
- Installation Guide: Setup and requirements
- Quick Start: Basic usage examples
- Strategies: Detailed strategy documentation
- API Reference: Complete API documentation
- Examples: Practical usage examples
- Contributing: Development guidelines

Documentation Features:
- Responsive design (mobile-friendly)
- Search functionality
- Cross-references between sections
- Syntax-highlighted code examples
- Automatic API documentation generation

CUSTOMIZATION
-------------

1. Update Documentation Version
Edit docs/conf.py:
```python
version = '0.1.1'
release = '0.1.1'
```

2. Modify Theme
Edit docs/conf.py:
```python
html_theme = 'sphinx_rtd_theme'  # or 'alabaster', 'classic', etc.
```

3. Add Custom Pages
Create new .rst files in docs/ directory and add to index.rst:
```rst
.. toctree::
   :maxdepth: 2
   
   new_page
```

VERIFICATION
------------

1. Check Deployment Status:
- Go to Actions tab
- Look for "Build and Deploy Documentation" workflow
- Verify it completed successfully

2. Access Documentation:
- Main docs: https://yourusername.github.io/py-garble/
- Versioned docs: https://yourusername.github.io/py-garble/versions/0.1.1/

3. Test Documentation:
- Verify all links work
- Check that code examples are syntax-highlighted
- Ensure API documentation is complete

TROUBLESHOOTING
---------------

Common Issues:

1. Documentation Not Deploying:
- Check GitHub Pages is enabled
- Verify workflow permissions
- Review Actions logs for errors

2. Build Failures:
- Check Sphinx configuration in docs/conf.py
- Verify all dependencies are installed
- Review build logs in Actions tab

3. Missing Pages:
- Ensure new pages are added to index.rst
- Check file paths are correct
- Verify .rst syntax

4. Version Issues:
- Update version in docs/conf.py
- Ensure release tags match documentation version
- Check that version bump workflow ran successfully

BEST PRACTICES
--------------

1. Documentation Maintenance:
- Keep documentation up-to-date with code changes
- Test documentation locally before pushing
- Use clear, concise language
- Include practical examples

2. Version Management:
- Update documentation version with each release
- Maintain backward compatibility in docs
- Archive old versions appropriately

3. Content Quality:
- Use consistent formatting
- Include code examples
- Cross-reference related sections
- Test all links and examples

================================================================================
5. LOCAL DEVELOPMENT
================================================================================

SETTING UP THE DEVELOPMENT ENVIRONMENT
--------------------------------------

1. Clone the repository:
git clone https://github.com/yourusername/py-garble.git
cd py-garble

2. Create a virtual environment:
python -m venv venv
source venv/bin/activate  # On Windows: venv\Scripts\activate

3. Install dependencies:
pip install -r requirements.txt
pip install -r requirements-dev.txt

4. Run tests:
pytest tests/

5. Run linting:
flake8 pygarble/
black pygarble/
mypy pygarble/

6. Run CI checks locally:
./scripts/test_ci.sh

CONTINUOUS INTEGRATION
----------------------
This project uses GitHub Actions for CI/CD. The workflow runs:

- Tests: All 44 tests across 5 test files on Python 3.8-3.12
- Linting: Code style checks with flake8, black, and isort
- Type Checking: Static type analysis with mypy
- Package Building: Ensures the package builds successfully

To set up branch protection rules that require all tests to pass before merging, 
see the Branch Protection Setup section above.

TESTING THE PACKAGE
-------------------

Local Testing
# Install build tools
pip install build twine

# Build the package
python -m build

# Check the package
twine check dist/*

# Test install
pip install dist/py_garble-0.1.0-py3-none-any.whl

Test PyPI Testing
# Upload to Test PyPI
twine upload --repository testpypi dist/*

# Install from Test PyPI
pip install --index-url https://test.pypi.org/simple/ py-garble

PACKAGE CONFIGURATION
---------------------
The package is configured using:
- pyproject.toml: Modern Python packaging configuration
- setup.py: Backward compatibility
- MANIFEST.in: File inclusion rules
- .bumpversion.cfg: Version management

================================================================================
6. TROUBLESHOOTING
================================================================================

COMMON ISSUES
-------------

Branch Protection Issues:
1. Status Checks Not Appearing
- Ensure the workflow file is in .github/workflows/
- Check that the workflow runs successfully on a test PR
- Verify branch protection rule is configured correctly

2. Workflow Failures
- Check the Actions tab for detailed error logs
- Ensure all dependencies are properly specified
- Verify Python version compatibility

3. Permission Issues
- Repository admins can bypass protection rules (unless "Include administrators" is checked)
- Ensure team members have appropriate repository permissions

Publishing Issues:
1. Build Failures
- Check that all dependencies are in requirements.txt
- Ensure all Python files are included
- Verify pyproject.toml syntax

2. Publishing Failures
- Verify API tokens are correct
- Check that package name is available
- Ensure version number is unique

3. Import Errors
- Test package installation locally first
- Check that all modules are properly included
- Verify __init__.py files exist

Development Issues:
1. Build Failures: Check that all dependencies are properly specified
2. Import Errors: Ensure all modules are included in the package
3. Test Failures: Run tests locally before pushing
4. Publishing Failures: Verify API tokens are correct

DEBUGGING STEPS
---------------

1. Check GitHub Actions Logs:
- Go to Actions tab
- Click on failed workflow
- Review detailed error messages

2. Test Locally:
# Build and test
python -m build
twine check dist/*

# Test installation
pip install dist/py_garble-0.1.0-py3-none-any.whl

3. Verify Configuration:
- Check pyproject.toml syntax
- Verify all required fields are present
- Ensure package name is correct

GETTING HELP
------------
If you encounter issues:
1. Check the GitHub Actions logs in the Actions tab
2. Review the branch protection settings in Settings > Branches
3. Ensure all required status checks are properly configured
4. Test package locally before pushing
5. Verify all files are included in the build

================================================================================
7. SECURITY BEST PRACTICES
================================================================================

GENERAL SECURITY
----------------
1. Never commit tokens to the repository
2. Use GitHub Secrets for sensitive information
3. Regularly rotate API tokens
4. Test on Test PyPI before production releases
5. Review package contents before publishing

REPOSITORY SECURITY
-------------------
1. Use branch protection rules
2. Require pull request reviews
3. Enable status checks
4. Restrict direct pushes to main branch
5. Include administrators in protection rules

PUBLISHING SECURITY
-------------------
1. Use API tokens with minimal required permissions
2. Test packages on Test PyPI first
3. Verify package contents before publishing
4. Monitor for unauthorized access
5. Keep dependencies up to date

================================================================================
BENEFITS SUMMARY
================================================================================

‚úÖ Prevents broken code from reaching the main branch  
‚úÖ Enforces coding standards across the team  
‚úÖ Automates quality checks on every change  
‚úÖ Provides clear feedback on code quality  
‚úÖ Supports multiple Python versions for compatibility  
‚úÖ Ensures package integrity before releases  
‚úÖ Creates a robust CI/CD pipeline that maintains code quality and prevents regressions

This setup creates a professional-grade development workflow that ensures high 
code quality and reliable package distribution.

================================================================================
SUPPORT
================================================================================

If you encounter issues:
1. Check GitHub Actions logs
2. Review PyPI documentation
3. Test locally before pushing
4. Ask for help in relevant communities

Remember: Publishing to PyPI makes your package available to millions of Python 
users worldwide!

================================================================================
END OF GUIDE
================================================================================
